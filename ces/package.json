{
  "name": "ces",
  "version": "0.0.3",
  "description": "Component-Entity-System framework for JavaScript games",
  "homepage": "https://github.com/qiao/ces.js",
  "keywords": [
    "component",
    "entity",
    "game"
  ],
  "author": {
    "name": "Xueqiao Xu",
    "email": "xueqiaoxu@gmail.com"
  },
  "main": "./index.js",
  "dependencies": {},
  "devDependencies": {
    "uglify-js": "2.*",
    "browserify": "1.17.3",
    "mocha": "1.8.1",
    "should": "1.2.1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/qiao/ces.js.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "readme": "CES.js\n==============\n\nCES.js is a lightweight Component-Entity-System framework for JavaScript games.\n\n\nBasic Usage\n-----------\n\n\nTo define a new component, simply extend `CES.Component`. \nNote that each component should have a unique `name` property.\n\n```js\nvar Position = CES.Component.extend({\n    name: 'position',\n    init: function (x, y) {\n        this.x = x;\n        this.y = y;\n    }\n});\n\nvar Velocity = CES.Component.extend({\n    name: 'velocity',\n    init: function (x, y) {\n        this.x = x;\n        this.y = y;\n    }\n});\n\nvar Health = CES.Component.extend({\n    name: 'health',\n    init: function (maxHealth) {\n        this.health = this.maxHealth = maxHealth;\n    },\n    isDead: function () {\n        return this.health <= 0;\n    },\n    receiveDamage: function (damage) {\n        this.health -= damage;\n    }\n});\n```\n\nAn entity is essentially a container of one or more components.\n\n```js\nvar hero = new CES.Entity();\nhero.addComponent(new Position(0, 0));\nhero.addComponent(new Velocity(0, 0));\nhero.addComponent(new Health(100));\n```\n\nThe system is responsible for updating the entities.\nIn a real game there may be a lot of systems, like `CollisionSystem`,\n`RenderSystem`, `ControlSystem` etc.\n\n```js\nvar PhysicSystem = CES.System.extend({\n    update: function (dt) {\n        var nodes, entities, position, velocity;\n\n        entities = this.world.getEntities('position', 'velocity');\n\n        entities.forEach(function (entity) {\n            position = entity.getComponent('position');\n            velocity = entity.getComponent('velocity');\n            position.x += velocity.x * dt;\n            position.y += velocity.y * dt;\n        });\n    }\n});\n```\n\nThe world is the container of all the entities and systems.\nCalling the `update` method will *sequentially* update all the systems,\nin the order they were added.\n\n```js\nvar world = new CES.World();\n\nworld.addEntity(hero);\n// ... add other entities\n\nworld.addSystem(new PhysicSystem());\n// ... add other systems\n\nrequestAnimationFrame(function () {\n    world.update(/* interval */);\n})\n```\n\nInstallation (Browser)\n-------\n\nDownload the [minified js file](http://github.com/qiao/ces.js/raw/master/dist/ces-browser.min.js) and include it in your web page.\n\n```html\n<script type=\"text/javascript\" src=\"./ces-browser.min.js\"></script>\n```\n\nNow skip to the `Basic Usage` section of this readme.\n\nInstallation (Node.js)\n------\n\nIf you want to use it in Node.js, you may install it via `npm`.\n\n```bash\nnpm install ces\n```\n\nThen, in your program:\n\n```javascript\nvar CES = require('ces');\n```\n\n\nDevelopment\n------------\n\nLayout:\n\n    .\n    |-- dist         # browser distribution\n    |-- src          # source code\n    `-- test         # test scripts\n\nYou will need to install `node.js` and use `npm` to install the dependencies: \n\n    npm install -d \n\nTo build the browser distribution \n(It will use [node-browserify](https://github.com/substack/node-browserify) to generate a browser distribution,\nand use [UglifyJS](https://github.com/mishoo/UglifyJS) to compress):\n\n    make\n\nTo run the tests with\n[mocha](http://visionmedia.github.com/mocha/) and [should.js](https://github.com/visionmedia/should.js) \n\n    make test\n\nLicense\n-------\n\n[MIT License](http://www.opensource.org/licenses/mit-license.php)\n\nCopyright 2013 Xueqiao Xu &lt;xueqiaoxu@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/qiao/ces.js/issues"
  },
  "_id": "ces@0.0.3",
  "_from": "ces@"
}
